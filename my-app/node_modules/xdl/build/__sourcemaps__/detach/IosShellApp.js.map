{"version":3,"sources":["detach/IosShellApp.js"],"names":["async","args","iosDir","privateConfigFile","spawnAsyncThrowError","path","join","configureShellAppSecretsAsync","iOSRootPath","relativeBuildDestination","let","action","configuration","verbose","type","buildCmd","buildDest","pathToApp","relative","console","log","await","stdio","cwd","shell","artifactLocation","buildAsync","manifest","expoSourcePath","privateConfig","privateConfigContents","fs","promise","readFile","JSON","parse","validateConfigArguments","archivePath","context","StandaloneContext","createServiceContext","url","releaseChannel","IosNSBundle","configureAsync","configureIOSShellAppAsync","output","archiveName","name","replace","appReleasePath","resolve","spawnAsync","moveShellAppArchiveAsync","validateArgs","sdkVersion","getManifestAsync","createIOSShellAppAsync","cmdArgs","configFilePath","Error","bundleIdentifierFromManifest","ios","bundleIdentifier","warn"],"mappings":"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","file":"../../detach/IosShellApp.js","sourcesContent":["// Copyright 2015-present 650 Industries. All rights reserved.\n\n'use strict';\n\nimport 'instapromise';\n\nimport fs from 'fs';\nimport path from 'path';\nimport { getManifestAsync, spawnAsync, spawnAsyncThrowError } from './ExponentTools';\n\nimport * as IosNSBundle from './IosNSBundle';\nimport StandaloneContext from './StandaloneContext';\n\nfunction validateConfigArguments(manifest, cmdArgs, configFilePath) {\n  if (!configFilePath) {\n    throw new Error('No path to config files provided');\n  }\n  let bundleIdentifierFromManifest = manifest.ios ? manifest.ios.bundleIdentifier : null;\n  if (!bundleIdentifierFromManifest) {\n    throw new Error('No bundle identifier found in either the manifest or argv');\n  }\n  if (!manifest.name) {\n    throw new Error('Manifest does not have a name');\n  }\n\n  if (!cmdArgs.privateConfigFile) {\n    console.warn('Warning: No config file specified.');\n  }\n  return true;\n}\n\n/**\n * Writes Fabric config to private-shell-app-config.json if necessary. Used by\n * generate-dynamic-macros when building.\n */\nasync function configureShellAppSecretsAsync(args, iosDir) {\n  if (!args.privateConfigFile) {\n    return;\n  }\n\n  spawnAsyncThrowError('/bin/cp', [\n    args.privateConfigFile,\n    path.join(iosDir, 'private-shell-app-config.json'),\n  ]);\n}\n\n/**\n *  Build the iOS binary from source.\n *  @return the path to the resulting .app\n */\nasync function buildAsync(args, iOSRootPath, relativeBuildDestination) {\n  let { action, configuration, verbose, type } = args;\n\n  let buildCmd, buildDest, pathToApp;\n  if (type === 'simulator') {\n    buildDest = path.relative(iOSRootPath, `${relativeBuildDestination}-simulator`);\n    buildCmd = `xcodebuild -workspace Exponent.xcworkspace -scheme Exponent -sdk iphonesimulator -configuration ${configuration} -derivedDataPath ${buildDest} CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO ARCHS=\"i386 x86_64\" ONLY_ACTIVE_ARCH=NO | xcpretty`;\n    pathToApp = `${buildDest}/Build/Products/${configuration}-iphonesimulator/Exponent.app`;\n  } else if (type === 'archive') {\n    buildDest = path.relative(iOSRootPath, `${relativeBuildDestination}-archive`);\n    buildCmd = `xcodebuild -workspace Exponent.xcworkspace -scheme Exponent -sdk iphoneos -destination generic/platform=iOS -configuration ${configuration} archive -derivedDataPath ${buildDest} -archivePath ${buildDest}/Exponent.xcarchive CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO | xcpretty`;\n    pathToApp = `${buildDest}/Exponent.xcarchive/Products/Applications/Exponent.app`;\n  }\n\n  if (buildCmd) {\n    console.log(`Building shell app under ${buildDest}:\\n`);\n    console.log(buildCmd);\n    if (!verbose) {\n      console.log(\n        '\\nxcodebuild is running. Logging errors only. To see full output, use --verbose 1...'\n      );\n    }\n    await spawnAsyncThrowError(buildCmd, null, {\n      // only stderr\n      stdio: verbose ? 'inherit' : ['ignore', 'ignore', 'inherit'],\n      cwd: iOSRootPath,\n      shell: true,\n    });\n\n    const artifactLocation = path.join(iOSRootPath, '../shellAppBase-builds', type, configuration);\n    await spawnAsyncThrowError('/bin/rm', ['-rf', artifactLocation]);\n    await spawnAsyncThrowError('/bin/mkdir', ['-p', artifactLocation]);\n\n    console.log(`\\nFinished building, copying artifact to ${artifactLocation}...`);\n    if (type === 'archive') {\n      await spawnAsyncThrowError('/bin/cp', [\n        '-R',\n        `${buildDest}/Exponent.xcarchive`,\n        artifactLocation,\n      ]);\n    } else if (type === 'simulator') {\n      await spawnAsyncThrowError('/bin/cp', ['-R', pathToApp, artifactLocation]);\n    }\n  }\n  return pathToApp;\n}\n\nfunction validateArgs(args) {\n  args.type = args.type || 'archive';\n  args.configuration = args.configuration || 'Release';\n  args.verbose = args.verbose || false;\n\n  switch (args.type) {\n    case 'simulator': {\n      if (args.configuration !== 'Debug' && args.configuration !== 'Release') {\n        throw new Error(`Unsupported build configuration ${args.configuration}`);\n      }\n      break;\n    }\n    case 'archive': {\n      if (args.configuration !== 'Release') {\n        throw new Error('Release is the only supported configuration when archiving');\n      }\n      break;\n    }\n    default: {\n      throw new Error(`Unsupported build type ${args.type}`);\n    }\n  }\n\n  switch (args.action) {\n    case 'configure': {\n      if (!args.url) {\n        throw new Error('Must run with `--url MANIFEST_URL`');\n      }\n      if (!args.sdkVersion) {\n        throw new Error('Must run with `--sdkVersion SDK_VERSION`');\n      }\n      if (!args.archivePath) {\n        throw new Error(\n          'Need to provide --archivePath <path to existing archive for configuration>'\n        );\n      }\n      break;\n    }\n    case 'build': {\n      break;\n    }\n    default: {\n      throw new Error(`Unsupported build action ${args.action}`);\n    }\n  }\n\n  return args;\n}\n\nasync function configureIOSShellAppAsync(args, manifest) {\n  const expoSourcePath = '../ios';\n  let { privateConfigFile } = args;\n\n  let privateConfig;\n  if (privateConfigFile) {\n    let privateConfigContents = await fs.promise.readFile(privateConfigFile, 'utf8');\n    privateConfig = JSON.parse(privateConfigContents);\n  }\n\n  // make sure we have all the required info\n  validateConfigArguments(manifest, args, args.archivePath);\n  const context = StandaloneContext.createServiceContext(\n    expoSourcePath,\n    args.archivePath,\n    manifest,\n    privateConfig,\n    args.configuration,\n    args.url,\n    args.releaseChannel,\n    null\n  );\n  await IosNSBundle.configureAsync(context);\n}\n\nasync function moveShellAppArchiveAsync(args, manifest) {\n  const { archivePath, output, type } = args;\n  const archiveName = manifest.name.replace(/[^0-9a-z_\\-\\.]/gi, '_');\n  const appReleasePath = path.resolve(path.join(`${archivePath}`, '..'));\n  if (type === 'simulator') {\n    await spawnAsync(\n      `mv Exponent.app ${archiveName}.app && tar -czvf ${output} ${archiveName}.app`,\n      null,\n      {\n        stdio: 'inherit',\n        cwd: appReleasePath,\n        shell: true,\n      }\n    );\n  } else if (type === 'archive') {\n    await spawnAsync('/bin/mv', ['Exponent.xcarchive', output], {\n      stdio: 'inherit',\n      cwd: `${archivePath}/../../../..`,\n    });\n  }\n  return;\n}\n\n/**\n*  @param url manifest url for shell experience\n*  @param sdkVersion sdk to use when requesting the manifest\n*  @param action\n*    build - build a binary\n*    configure - don't build anything, just configure the files in an existing .app bundle\n*  @param type simulator or archive\n*  @param releaseChannel channel to pull manifests from, default is 'default'\n*  @param configuration Debug or Release, for type == simulator (default Release)\n*  @param archivePath path to existing bundle, for action == configure\n*  @param privateConfigFile path to a private config file containing, e.g., private api keys\n*  @param verbose show all xcodebuild output (default false)\n*  @param output specify the output path of built project (ie) /tmp/my-app-archive-build.xcarchive or /tmp/my-app-ios-build.tar.gz\n*/\nasync function createIOSShellAppAsync(args) {\n  args = validateArgs(args);\n\n  if (args.action === 'build') {\n    await configureShellAppSecretsAsync(args, '../ios');\n    await buildAsync(args, '../ios', '../shellAppBase');\n  } else if (args.action === 'configure') {\n    let { url, sdkVersion } = args;\n    let manifest = await getManifestAsync(url, {\n      'Exponent-SDK-Version': sdkVersion,\n      'Exponent-Platform': 'ios',\n      'Expo-Release-Channel': args.releaseChannel ? args.releaseChannel : 'default',\n    });\n    await configureIOSShellAppAsync(args, manifest);\n    if (args.output) {\n      await moveShellAppArchiveAsync(args, manifest);\n    }\n  }\n\n  return;\n}\n\nexport { createIOSShellAppAsync };\n"],"sourceRoot":"/xdl/src"}