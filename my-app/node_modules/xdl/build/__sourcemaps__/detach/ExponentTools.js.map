{"version":3,"sources":["detach/ExponentTools.js"],"names":["async","url","headers","let","requestOptions","replace","response","await","request","promise","responseBody","body","console","log","manifest","JSON","parse","e","Error","getManifestAsync","args","length","spawnAsyncQuiet","stdio","cwd","process","spawnAsyncThrowError","error","message","spawnAsync","filename","transform","fileString","fs","readFile","newFileString","writeFile","transformFileContentsAsync","_getFilesizeInBytes","path","stats","statSync","fileSizeInBytes","parseSdkMajorVersion","expSdkVersion","sdkMajorVersion","versionComponents","split","map","number","parseInt","_","saveUrlToPathAsync","Promise","resolve","reject","stream","createWriteStream","on","pipe","saveImageToPathAsync","projectRoot","pathOrURL","outPath","localPath","existsSync","createReadStream","manifestUsesSplashApi","platform","splash","ios","android","rimrafDontThrow","directory","rimraf","sync","warn","isDirectory","dir"],"mappings":"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","file":"../../detach/ExponentTools.js","sourcesContent":["// Copyright 2015-present 650 Industries. All rights reserved.\n\n'use strict';\n\nimport fs from 'fs';\nimport 'instapromise';\nimport path from 'path';\nimport request from 'request';\nimport rimraf from 'rimraf';\nimport spawnAsyncQuiet from '@expo/spawn-async';\n\nfunction _getFilesizeInBytes(path) {\n  let stats = fs.statSync(path);\n  let fileSizeInBytes = stats['size'];\n  return fileSizeInBytes;\n}\n\nfunction parseSdkMajorVersion(expSdkVersion) {\n  let sdkMajorVersion = 0;\n  try {\n    let versionComponents = expSdkVersion.split('.').map(number => parseInt(number, 10));\n    sdkMajorVersion = versionComponents[0];\n  } catch (_) {}\n  return sdkMajorVersion;\n}\n\nfunction saveUrlToPathAsync(url, path) {\n  return new Promise(function(resolve, reject) {\n    let stream = fs.createWriteStream(path);\n    stream.on('close', () => {\n      if (_getFilesizeInBytes(path) < 10) {\n        throw new Error(`{filename} is too small`);\n      }\n      resolve();\n    });\n    stream.on('error', reject);\n    request(url).pipe(stream);\n  });\n}\n\nfunction saveImageToPathAsync(projectRoot, pathOrURL, outPath) {\n  const localPath = path.resolve(projectRoot, pathOrURL);\n  return new Promise(function(resolve, reject) {\n    let stream = fs.createWriteStream(outPath);\n    stream.on('close', () => {\n      if (_getFilesizeInBytes(outPath) < 10) {\n        throw new Error(`{filename} is too small`);\n      }\n      resolve();\n    });\n    stream.on('error', reject);\n    if (fs.existsSync(localPath)) {\n      fs.createReadStream(localPath).pipe(stream);\n    } else {\n      request(pathOrURL).pipe(stream);\n    }\n  });\n}\n\nasync function getManifestAsync(url, headers) {\n  let requestOptions = {\n    url: url.replace('exp://', 'http://') + '/index.exp',\n    headers,\n  };\n\n  let response = await request.promise(requestOptions);\n  let responseBody = response.body;\n  console.log('Using manifest:', responseBody);\n  let manifest;\n  try {\n    manifest = JSON.parse(responseBody);\n  } catch (e) {\n    throw new Error(`Unable to parse manifest: ${e}`);\n  }\n\n  return manifest;\n}\n\nasync function spawnAsyncThrowError(...args) {\n  if (args.length === 2) {\n    return spawnAsyncQuiet(args[0], args[1], {\n      stdio: 'inherit',\n      cwd: process.cwd(),\n    });\n  } else {\n    return spawnAsyncQuiet(...args);\n  }\n}\n\nasync function spawnAsync(...args) {\n  try {\n    return await spawnAsyncThrowError(...args);\n  } catch (e) {\n    console.error(e.message);\n  }\n}\n\nasync function transformFileContentsAsync(filename, transform) {\n  let fileString = await fs.promise.readFile(filename, 'utf8');\n  let newFileString = transform(fileString);\n  if (newFileString !== null) {\n    await fs.promise.writeFile(filename, newFileString);\n  }\n  return;\n}\n\nfunction manifestUsesSplashApi(manifest, platform) {\n  if (platform === 'ios') {\n    return manifest.splash || (manifest.ios && manifest.ios.splash);\n  }\n  if (platform === 'android') {\n    return manifest.splash || (manifest.android && manifest.android.splash);\n  }\n  return false;\n}\n\nfunction rimrafDontThrow(directory) {\n  try {\n    rimraf.sync(directory);\n  } catch (e) {\n    console.warn(\n      `There was an issue cleaning up, but your project should still work. You may need to manually remove ${directory}. (${e})`\n    );\n  }\n}\n\nfunction isDirectory(dir) {\n  try {\n    if (fs.statSync(dir).isDirectory()) {\n      return true;\n    }\n\n    return false;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport {\n  isDirectory,\n  parseSdkMajorVersion,\n  saveUrlToPathAsync,\n  saveImageToPathAsync,\n  getManifestAsync,\n  rimrafDontThrow,\n  spawnAsyncThrowError,\n  spawnAsync,\n  transformFileContentsAsync,\n  manifestUsesSplashApi,\n};\n"],"sourceRoot":"/xdl/src"}