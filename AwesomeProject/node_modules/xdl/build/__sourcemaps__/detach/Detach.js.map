{"version":3,"sources":["detach/Detach.js"],"names":["async","projectRoot","options","let","user","await","UserManager","ensureLoggedInAsync","Error","username","exp","ProjectUtils","readConfigJsonAsync","experienceName","slug","experienceUrl","hasIosDirectory","isDirectory","path","join","hasAndroidDirectory","ErrorCode","DIRECTORY_ALREADY_EXISTS","process","platform","response","yesnoAsync","console","log","configName","configFilenameAsync","name","android","package","sdkVersion","majorSdkVersion","parseSdkMajorVersion","versions","Versions","versionsAsync","sdkVersionConfig","sdkVersions","androidExpoViewUrl","iosExpoViewUrl","env","EXPO_VIEW_DIR","warn","isDetached","detach","scheme","detachedUUID","uuid","v4","replace","expoDirectory","mkdirp","sync","isIosSupported","force","context","StandaloneContext","createUserContext","detachIOSAsync","IosWorkspace","addDetachedConfigToExp","androidDirectory","rimraf","detachAndroidAsync","nameToWrite","expo","fs","promise","writeFile","JSON","stringify","detachAsync","createDetachedAsync","IosNSBundle","configureAsync","filename","regex","file","readFile","fileString","toString","regexFileAsync","directory","originalPkg","destPkg","originalSplitPackage","split","originalDeepDirectory","i","length","tmpDirectory","Utils","ncpAsync","newSplitPackage","newDeepDirectory","renamePackageAsync","manifest","expoViewUrl","tmpExpoDirectory","Api","downloadAsync","extract","androidProjectDirectory","appBuildGradle","androidManifest","mainActivity","packageName","ANDROID_TEMPLATE_PKG","packageNameMatches","glob","oldPkgRegex","RegExp","appName","resolve","ANDROID_TEMPLATE_NAME","icon","iconMatches","unlink","saveImageToPathAsync","rimrafDontThrow","configFilePath","doesBuildConstantsExist","existsSync","IosPlist","createBlankAsync","ensureBuildConstantsExistsIOSAsync","projectDir","args","iosProjectDirectory","supportingDirectory","getPaths","podsDirectory","rnPodDirectory","rnFilesToDelete","skipXcodeConfig","expoKitVersion","podfileLockPath","podfileLock","expoKitVersionRegex","match","exec","e","devUrl","UrlUtils","constructManifestUrlAsync","modifyAsync","constantsConfig","developmentUrl","EXPO_RUNTIME_VERSION","prepareDetachedBuildIosAsync","expoBuildConstantsMatches","expoBuildConstants","prepareDetachedBuildAsync","ANDROID_TEMPLATE_COMPANY","question","Promise","yesno","ask","ok"],"mappings":"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","file":"../../detach/Detach.js","sourcesContent":["// Copyright 2015-present 650 Industries. All rights reserved.\n/**\n * @flow\n */\n\n'use strict';\n\n// Set EXPO_VIEW_DIR to universe/exponent to test locally\n\nimport 'instapromise';\n\nimport mkdirp from 'mkdirp';\nimport fs from 'fs';\nimport path from 'path';\nimport rimraf from 'rimraf';\nimport glob from 'glob';\nimport uuid from 'uuid';\nimport yesno from 'yesno';\n\nimport {\n  isDirectory,\n  parseSdkMajorVersion,\n  saveImageToPathAsync,\n  rimrafDontThrow,\n} from './ExponentTools';\n\nimport * as IosPlist from './IosPlist';\nimport * as IosNSBundle from './IosNSBundle';\nimport * as IosWorkspace from './IosWorkspace';\n\nimport Api from '../Api';\nimport ErrorCode from '../ErrorCode';\nimport * as ProjectUtils from '../project/ProjectUtils';\nimport UserManager from '../User';\nimport XDLError from '../XDLError';\nimport StandaloneContext from './StandaloneContext';\nimport * as UrlUtils from '../UrlUtils';\nimport * as Utils from '../Utils';\nimport * as Versions from '../Versions';\n\nconst ANDROID_TEMPLATE_PKG = 'detach.app.template.pkg.name';\nconst ANDROID_TEMPLATE_COMPANY = 'detach.app.template.company.domain';\nconst ANDROID_TEMPLATE_NAME = 'DetachAppTemplate';\n\nfunction yesnoAsync(question) {\n  return new Promise(resolve => {\n    yesno.ask(question, null, ok => {\n      resolve(ok);\n    });\n  });\n}\n\nexport async function detachAsync(projectRoot: string, options: any) {\n  let user = await UserManager.ensureLoggedInAsync();\n\n  if (!user) {\n    throw new Error('Internal error -- somehow detach is being run in offline mode.');\n  }\n\n  let username = user.username;\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  let experienceName = `@${username}/${exp.slug}`;\n  let experienceUrl = `exp://exp.host/${experienceName}`;\n\n  // Check to make sure project isn't fully detached already\n  let hasIosDirectory = isDirectory(path.join(projectRoot, 'ios'));\n  let hasAndroidDirectory = isDirectory(path.join(projectRoot, 'android'));\n\n  if (hasIosDirectory && hasAndroidDirectory) {\n    throw new XDLError(\n      ErrorCode.DIRECTORY_ALREADY_EXISTS,\n      'Error detaching. `ios` and `android` directories already exist.'\n    );\n  }\n\n  // Project was already detached on Windows or Linux\n  if (!hasIosDirectory && hasAndroidDirectory && process.platform === 'darwin') {\n    let response = await yesnoAsync(\n      `This will add an Xcode project and leave your existing Android project alone. Enter 'yes' to continue:`\n    );\n    if (!response) {\n      console.log('Exiting...');\n      return false;\n    }\n  }\n\n  if (hasIosDirectory && !hasAndroidDirectory) {\n    throw new Error('`ios` directory already exists. Please remove it and try again.');\n  }\n\n  console.log('Validating project manifest...');\n  const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n  if (!exp.name) {\n    throw new Error(`${configName} is missing \\`name\\``);\n  }\n\n  if (!exp.android || !exp.android.package) {\n    throw new Error(\n      `${configName} is missing android.package field. See https://docs.expo.io/versions/latest/guides/configuration.html#package`\n    );\n  }\n\n  if (!exp.sdkVersion) {\n    throw new Error(`${configName} is missing \\`sdkVersion\\``);\n  }\n\n  let majorSdkVersion = parseSdkMajorVersion(exp.sdkVersion);\n  if (majorSdkVersion < 16) {\n    throw new Error(`${configName} must be updated to SDK 16.0.0 or newer to be detached.`);\n  }\n\n  const versions = await Versions.versionsAsync();\n  let sdkVersionConfig = versions.sdkVersions[exp.sdkVersion];\n  if (\n    !sdkVersionConfig ||\n    !sdkVersionConfig.androidExpoViewUrl ||\n    !sdkVersionConfig.iosExpoViewUrl\n  ) {\n    if (process.env.EXPO_VIEW_DIR) {\n      console.warn(\n        `Detaching is not supported for SDK ${exp.sdkVersion}; ignoring this because you provided EXPO_VIEW_DIR`\n      );\n      sdkVersionConfig = {};\n    } else {\n      throw new Error(`Detaching is not supported for SDK version ${exp.sdkVersion}`);\n    }\n  }\n\n  // Modify exp.json\n  exp.isDetached = true;\n\n  if (!exp.detach) {\n    exp.detach = {};\n  }\n\n  if (!exp.detach.scheme) {\n    let detachedUUID = uuid.v4().replace(/-/g, '');\n    exp.detach.scheme = `exp${detachedUUID}`;\n  }\n\n  let expoDirectory = path.join(projectRoot, '.expo-source');\n  mkdirp.sync(expoDirectory);\n\n  // iOS\n  let isIosSupported = true;\n  if (process.platform !== 'darwin') {\n    if (options && options.force) {\n      console.warn(\n        `You are not running macOS, but have provided the --force option, so we will attempt to generate an iOS project anyway. This might fail.`\n      );\n    } else {\n      console.warn(`Skipping iOS because you are not running macOS.`);\n      isIosSupported = false;\n    }\n  }\n  if (!hasIosDirectory && isIosSupported) {\n    const context = StandaloneContext.createUserContext(projectRoot, exp, experienceUrl);\n    await detachIOSAsync(context);\n    exp = IosWorkspace.addDetachedConfigToExp(exp, context);\n    exp.detach.iosExpoViewUrl = sdkVersionConfig.iosExpoViewUrl;\n  }\n\n  // Android\n  if (!hasAndroidDirectory) {\n    let androidDirectory = path.join(expoDirectory, 'android');\n    rimraf.sync(androidDirectory);\n    mkdirp.sync(androidDirectory);\n    await detachAndroidAsync(\n      projectRoot,\n      androidDirectory,\n      exp.sdkVersion,\n      experienceUrl,\n      exp,\n      sdkVersionConfig.androidExpoViewUrl\n    );\n    exp.detach.androidExpoViewUrl = sdkVersionConfig.androidExpoViewUrl;\n  }\n\n  console.log('Writing ExpoKit configuration...');\n  // Update exp.json/app.json\n  // if we're writing to app.json, we need to place the configuration under the expo key\n  const nameToWrite = await ProjectUtils.configFilenameAsync(projectRoot);\n  if (nameToWrite === 'app.json') {\n    exp = { expo: exp };\n  }\n  await fs.promise.writeFile(path.join(projectRoot, nameToWrite), JSON.stringify(exp, null, 2));\n\n  console.log(\n    'Finished detaching your project! Look in the `android` and `ios` directories for the respective native projects. Follow the ExpoKit guide at https://docs.expo.io/versions/latest/guides/expokit.html to get your project running.\\n'\n  );\n  return true;\n}\n\n/**\n *  Create a detached Expo iOS app pointing at the given project.\n */\nasync function detachIOSAsync(context: StandaloneContext) {\n  await IosWorkspace.createDetachedAsync(context);\n\n  console.log('Configuring iOS project...');\n  await IosNSBundle.configureAsync(context);\n\n  console.log(`iOS detach is complete!`);\n  return;\n}\n\nasync function regexFileAsync(filename, regex, replace) {\n  let file = await fs.promise.readFile(filename);\n  let fileString = file.toString();\n  await fs.promise.writeFile(filename, fileString.replace(regex, replace));\n}\n\nasync function renamePackageAsync(directory, originalPkg, destPkg) {\n  let originalSplitPackage = originalPkg.split('.');\n  let originalDeepDirectory = directory;\n  for (let i = 0; i < originalSplitPackage.length; i++) {\n    originalDeepDirectory = path.join(originalDeepDirectory, originalSplitPackage[i]);\n  }\n\n  // copy files into temp directory\n  let tmpDirectory = path.join(directory, 'tmp-exponent-directory');\n  mkdirp.sync(tmpDirectory);\n  await Utils.ncpAsync(originalDeepDirectory, tmpDirectory);\n\n  // delete old package\n  rimraf.sync(path.join(directory, originalSplitPackage[0]));\n\n  // make new package\n  let newSplitPackage = destPkg.split('.');\n  let newDeepDirectory = directory;\n  for (let i = 0; i < newSplitPackage.length; i++) {\n    newDeepDirectory = path.join(newDeepDirectory, newSplitPackage[i]);\n    mkdirp.sync(newDeepDirectory);\n  }\n\n  // copy from temp to new package\n  await Utils.ncpAsync(tmpDirectory, newDeepDirectory);\n\n  // delete temp\n  rimraf.sync(tmpDirectory);\n}\n\nasync function detachAndroidAsync(\n  projectRoot,\n  expoDirectory,\n  sdkVersion,\n  experienceUrl,\n  manifest,\n  expoViewUrl: string\n) {\n  let tmpExpoDirectory;\n  if (process.env.EXPO_VIEW_DIR) {\n    // Only for testing\n    tmpExpoDirectory = process.env.EXPO_VIEW_DIR;\n  } else {\n    tmpExpoDirectory = path.join(projectRoot, 'temp-android-directory');\n    mkdirp.sync(tmpExpoDirectory);\n    console.log('Downloading Android code...');\n    await Api.downloadAsync(expoViewUrl, tmpExpoDirectory, { extract: true });\n  }\n\n  let androidProjectDirectory = path.join(projectRoot, 'android');\n\n  console.log('Moving Android project files...');\n\n  await Utils.ncpAsync(\n    path.join(tmpExpoDirectory, 'android', 'maven'),\n    path.join(expoDirectory, 'maven')\n  );\n  await Utils.ncpAsync(\n    path.join(tmpExpoDirectory, 'android', 'detach-scripts'),\n    path.join(expoDirectory, 'detach-scripts')\n  );\n  await Utils.ncpAsync(\n    path.join(tmpExpoDirectory, 'exponent-view-template', 'android'),\n    androidProjectDirectory\n  );\n  if (process.env.EXPO_VIEW_DIR) {\n    rimraf.sync(path.join(androidProjectDirectory, 'build'));\n    rimraf.sync(path.join(androidProjectDirectory, 'app', 'build'));\n  }\n\n  // Fix up app/build.gradle\n  console.log('Configuring Android project...');\n  let appBuildGradle = path.join(androidProjectDirectory, 'app', 'build.gradle');\n  await regexFileAsync(appBuildGradle, /\\/\\* UNCOMMENT WHEN DISTRIBUTING/g, '');\n  await regexFileAsync(appBuildGradle, /END UNCOMMENT WHEN DISTRIBUTING \\*\\//g, '');\n  await regexFileAsync(appBuildGradle, `compile project(':expoview')`, '');\n\n  // Fix AndroidManifest\n  let androidManifest = path.join(\n    androidProjectDirectory,\n    'app',\n    'src',\n    'main',\n    'AndroidManifest.xml'\n  );\n  await regexFileAsync(androidManifest, 'PLACEHOLDER_DETACH_SCHEME', manifest.detach.scheme);\n\n  // Fix MainActivity\n  let mainActivity = path.join(\n    androidProjectDirectory,\n    'app',\n    'src',\n    'main',\n    'java',\n    'detach',\n    'app',\n    'template',\n    'pkg',\n    'name',\n    'MainActivity.java'\n  );\n  await regexFileAsync(mainActivity, 'TEMPLATE_INITIAL_URL', experienceUrl);\n\n  // Fix package name\n  let packageName = manifest.android.package;\n  await renamePackageAsync(\n    path.join(androidProjectDirectory, 'app', 'src', 'main', 'java'),\n    ANDROID_TEMPLATE_PKG,\n    packageName\n  );\n  await renamePackageAsync(\n    path.join(androidProjectDirectory, 'app', 'src', 'test', 'java'),\n    ANDROID_TEMPLATE_PKG,\n    packageName\n  );\n  await renamePackageAsync(\n    path.join(androidProjectDirectory, 'app', 'src', 'androidTest', 'java'),\n    ANDROID_TEMPLATE_PKG,\n    packageName\n  );\n\n  let packageNameMatches = await glob.promise(androidProjectDirectory + '/**/*.@(java|gradle|xml)');\n  if (packageNameMatches) {\n    let oldPkgRegex = new RegExp(`${ANDROID_TEMPLATE_PKG.replace(/\\./g, '\\\\.')}`, 'g');\n    for (let i = 0; i < packageNameMatches.length; i++) {\n      await regexFileAsync(packageNameMatches[i], oldPkgRegex, packageName);\n    }\n  }\n\n  // Fix app name\n  console.log('Naming Android project...');\n  let appName = manifest.name;\n  await regexFileAsync(\n    path.resolve(androidProjectDirectory, 'app', 'src', 'main', 'res', 'values', 'strings.xml'),\n    ANDROID_TEMPLATE_NAME,\n    appName\n  );\n\n  // Fix image\n  let icon = manifest.android && manifest.android.icon ? manifest.android.icon : manifest.icon;\n  if (icon) {\n    let iconMatches = await glob.promise(\n      path.join(androidProjectDirectory, 'app', 'src', 'main', 'res') + '/**/ic_launcher.png'\n    );\n    if (iconMatches) {\n      for (let i = 0; i < iconMatches.length; i++) {\n        await fs.promise.unlink(iconMatches[i]);\n        // TODO: make more efficient\n        await saveImageToPathAsync(projectRoot, icon, iconMatches[i]);\n      }\n    }\n  }\n\n  // Clean up\n  console.log('Cleaning up Android...');\n  if (!process.env.EXPO_VIEW_DIR) {\n    rimrafDontThrow(tmpExpoDirectory);\n  }\n  console.log('Android detach is complete!\\n');\n}\n\nasync function ensureBuildConstantsExistsIOSAsync(configFilePath: string) {\n  // EXBuildConstants is included in newer ExpoKit projects.\n  // create it if it doesn't exist.\n  const doesBuildConstantsExist = fs.existsSync(\n    path.join(configFilePath, 'EXBuildConstants.plist')\n  );\n  if (!doesBuildConstantsExist) {\n    await IosPlist.createBlankAsync(configFilePath, 'EXBuildConstants');\n    console.log('Created `EXBuildConstants.plist` because it did not exist yet');\n  }\n  return;\n}\n\nasync function prepareDetachedBuildIosAsync(projectDir: string, exp: any, args: any) {\n  const context = StandaloneContext.createUserContext(projectDir, exp);\n  let { iosProjectDirectory, supportingDirectory } = IosWorkspace.getPaths(context);\n\n  console.log(`Preparing iOS build at ${iosProjectDirectory}...`);\n  // These files cause @providesModule naming collisions\n  // but are not available until after `pod install` has run.\n  let podsDirectory = path.join(iosProjectDirectory, 'Pods');\n  if (!isDirectory(podsDirectory)) {\n    throw new Error(`Can't find directory ${podsDirectory}, make sure you've run pod install.`);\n  }\n  let rnPodDirectory = path.join(podsDirectory, 'React');\n  if (isDirectory(rnPodDirectory)) {\n    let rnFilesToDelete = await glob.promise(rnPodDirectory + '/**/*.@(js|json)');\n    if (rnFilesToDelete) {\n      for (let i = 0; i < rnFilesToDelete.length; i++) {\n        await fs.promise.unlink(rnFilesToDelete[i]);\n      }\n    }\n  }\n  // insert expo development url into iOS config\n  if (!args.skipXcodeConfig) {\n    // populate EXPO_RUNTIME_VERSION from ExpoKit pod version\n    let expoKitVersion = '';\n    const podfileLockPath = path.join(iosProjectDirectory, 'Podfile.lock');\n    try {\n      const podfileLock = await fs.promise.readFile(podfileLockPath, 'utf8');\n      const expoKitVersionRegex = /ExpoKit\\/Core\\W?\\(([0-9\\.]+)\\)/gi;\n      let match = expoKitVersionRegex.exec(podfileLock);\n      expoKitVersion = match[1];\n    } catch (e) {\n      throw new Error(\n        `Unable to read ExpoKit version from Podfile.lock. Make sure your project depends on ExpoKit. (${e})`\n      );\n    }\n\n    // populate development url\n    let devUrl = await UrlUtils.constructManifestUrlAsync(projectDir);\n\n    await ensureBuildConstantsExistsIOSAsync(supportingDirectory);\n    await IosPlist.modifyAsync(supportingDirectory, 'EXBuildConstants', constantsConfig => {\n      constantsConfig.developmentUrl = devUrl;\n      constantsConfig.EXPO_RUNTIME_VERSION = expoKitVersion;\n      return constantsConfig;\n    });\n  }\n}\n\nexport async function prepareDetachedBuildAsync(projectDir: string, args: any) {\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectDir);\n\n  if (args.platform === 'ios') {\n    await prepareDetachedBuildIosAsync(projectDir, exp, args);\n  } else {\n    let androidProjectDirectory = path.join(projectDir, 'android');\n    let expoBuildConstantsMatches = await glob.promise(\n      androidProjectDirectory + '/**/ExponentBuildConstants.java'\n    );\n    if (expoBuildConstantsMatches && expoBuildConstantsMatches.length) {\n      let expoBuildConstants = expoBuildConstantsMatches[0];\n      let devUrl = await UrlUtils.constructManifestUrlAsync(projectDir);\n      await regexFileAsync(\n        expoBuildConstants,\n        /DEVELOPMENT_URL \\= \\\"[^\\\"]*\\\"\\;/,\n        `DEVELOPMENT_URL = \"${devUrl}\";`\n      );\n    }\n  }\n}\n"],"sourceRoot":"/xdl/src"}