{"version":3,"sources":["detach/IosPlist.js"],"names":["async","plistPath","plistName","transform","let","plistFilename","_getNormalizedPlistFilename","configPlistName","path","join","configFilename","config","process","platform","await","spawnAsyncThrowError","configContents","fs","promise","readFile","JSON","parse","e","console","log","plist","readFileSync","writeFile","stringify","build","modifyAsync","emptyConfig","tmpConfigFile","createBlankAsync","restoreOriginal","cleanBackupAsync","indexOf"],"mappings":"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","file":"../../detach/IosPlist.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport plist from 'plist';\n\nimport { spawnAsyncThrowError } from './ExponentTools';\n\nfunction _getNormalizedPlistFilename(plistName) {\n  let plistFilename;\n  if (plistName.indexOf('.') !== -1) {\n    plistFilename = plistName;\n  } else {\n    plistFilename = `${plistName}.plist`;\n  }\n  return plistFilename;\n}\n\n/**\n *  @param plistName base filename of property list. if no extension, assumes .plist\n */\nasync function modifyAsync(plistPath, plistName, transform) {\n  let plistFilename = _getNormalizedPlistFilename(plistName);\n  let configPlistName = path.join(plistPath, plistFilename);\n  let configFilename = path.join(plistPath, `${plistName}.json`);\n\n  // grab original plist as json object\n  let config;\n  if (process.platform === 'darwin') {\n    await spawnAsyncThrowError('plutil', [\n      '-convert',\n      'json',\n      configPlistName,\n      '-o',\n      configFilename,\n    ]);\n    let configContents = await fs.promise.readFile(configFilename, 'utf8');\n\n    try {\n      config = JSON.parse(configContents);\n    } catch (e) {\n      console.log(`Error parsing ${configFilename}`, e);\n      console.log('The erroneous file contents was:', configContents);\n      config = {};\n    }\n  } else {\n    config = plist.parse(fs.readFileSync(configPlistName, 'utf8'));\n  }\n\n  // apply transformation\n  config = transform(config);\n\n  // back up old plist and swap in modified one\n  await spawnAsyncThrowError('/bin/cp', [configPlistName, `${configPlistName}.bak`]);\n  await fs.promise.writeFile(configFilename, JSON.stringify(config));\n  if (process.platform === 'darwin') {\n    await spawnAsyncThrowError('plutil', [\n      '-convert',\n      'xml1',\n      configFilename,\n      '-o',\n      configPlistName,\n    ]);\n  } else {\n    await fs.promise.writeFile(configPlistName, plist.build(config));\n  }\n\n  return config;\n}\n\nasync function createBlankAsync(plistPath, plistName) {\n  // write empty json file\n  const emptyConfig = {};\n  const tmpConfigFile = path.join(plistPath, `${plistName}.json`);\n  await fs.promise.writeFile(tmpConfigFile, JSON.stringify(emptyConfig));\n\n  // convert to plist\n  let plistFilename = _getNormalizedPlistFilename(plistName);\n  let configPlistName = path.join(plistPath, plistFilename);\n  if (process.platform === 'darwin') {\n    await spawnAsyncThrowError('plutil', [\n      '-convert',\n      'xml1',\n      tmpConfigFile,\n      '-o',\n      configPlistName,\n    ]);\n  } else {\n    await fs.promise.writeFile(configPlistName, JSON.stringify(plist.build(emptyConfig)));\n  }\n\n  // remove tmp json file\n  await spawnAsyncThrowError('/bin/rm', [tmpConfigFile]);\n  return;\n}\n\nasync function cleanBackupAsync(plistPath, plistName, restoreOriginal = true) {\n  let plistFilename = _getNormalizedPlistFilename(plistName);\n  let configPlistName = path.join(plistPath, plistFilename);\n  let configFilename = path.join(plistPath, `${plistName}.json`);\n\n  if (restoreOriginal) {\n    await spawnAsyncThrowError('/bin/cp', [`${configPlistName}.bak`, configPlistName]);\n  }\n\n  await spawnAsyncThrowError('/bin/rm', [`${configPlistName}.bak`]);\n  await spawnAsyncThrowError('/bin/rm', [configFilename]);\n  return;\n}\n\nexport { modifyAsync, cleanBackupAsync, createBlankAsync };\n"],"sourceRoot":"/xdl/src"}