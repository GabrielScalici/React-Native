{"version":3,"sources":["detach/IosWorkspace.js"],"names":["async","sdkVersion","versions","await","Versions","versionsAsync","let","sdkVersionConfig","sdkVersions","process","env","EXPO_VIEW_DIR","Error","iosVersion","iosExpoViewUrl","iosClientVersion","_getVersionedExpoKitConfigAsync","projectRoot","expoTemplateDirectory","path","join","isDirectory","mkdirp","sync","console","log","Api","downloadAsync","extract","_getOrCreateTemplateDirectoryAsync","projectDirectory","projectName","exp","gitIgnorePath","fs","existsSync","rimraf","e","filesToTransform","bundleIdentifier","ios","Promise","all","map","fileName","transformFileContentsAsync","fileString","replace","filesToMove","forEach","destFileName","dirname","extname","spawnAsync","_renameAndMoveProjectFilesAsync","configFilePath","detachedSDKVersion","kernelSDKVersion","IosPlist","modifyAsync","versionConfig","detachedNativeVersions","shell","kernel","_configureVersionsPlistAsync","context","templatePodfilePath","iosProjectDirectory","getPaths","podfileSubstitutions","TARGET_NAME","REACT_NATIVE_PATH","relative","data","projectPath","EXPOKIT_TAG","EXPOKIT_TAG_IOS","EXPOKIT_PATH","renderPodfileAsync","_renderPodfileFromTemplateAsync","type","config","supportingDirectory","Utils","ncpAsync","rimrafDontThrow","cleanBackupAsync","createDetachedAsync","addDetachedConfigToExp","warn","publishBundlePath","publishManifestPath","intermediatesDirectory","name","projectNameLabel","toLowerCase","archivePath","expoSourcePath"],"mappings":"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","file":"../../detach/IosWorkspace.js","sourcesContent":["/**\n * @flow\n */\nimport fs from 'fs';\nimport mkdirp from 'mkdirp';\nimport path from 'path';\nimport rimraf from 'rimraf';\n\nimport Api from '../Api';\nimport {\n  isDirectory,\n  rimrafDontThrow,\n  spawnAsync,\n  transformFileContentsAsync,\n} from './ExponentTools';\nimport { renderPodfileAsync } from './IosPodsTools.js';\nimport * as IosPlist from './IosPlist';\nimport * as Utils from '../Utils';\nimport StandaloneContext from './StandaloneContext';\nimport * as Versions from '../Versions';\n\nasync function _getVersionedExpoKitConfigAsync(sdkVersion: string): any {\n  const versions = await Versions.versionsAsync();\n  let sdkVersionConfig = versions.sdkVersions[sdkVersion];\n  if (!sdkVersionConfig) {\n    if (process.env.EXPO_VIEW_DIR) {\n      sdkVersionConfig = {};\n    } else {\n      throw new Error(`Unsupported SDK version: ${sdkVersion}`);\n    }\n  }\n  const { iosVersion, iosExpoViewUrl } = sdkVersionConfig;\n  const iosClientVersion = iosVersion ? iosVersion : versions.iosVersion;\n  return {\n    iosClientVersion,\n    iosExpoViewUrl,\n  };\n}\n\nasync function _getOrCreateTemplateDirectoryAsync(projectRoot: string, iosExpoViewUrl: string) {\n  let expoTemplateDirectory;\n  if (process.env.EXPO_VIEW_DIR) {\n    // Only for testing\n    expoTemplateDirectory = process.env.EXPO_VIEW_DIR;\n  } else {\n    expoTemplateDirectory = path.join(projectRoot, 'temp-ios-directory');\n    if (!isDirectory(expoTemplateDirectory)) {\n      mkdirp.sync(expoTemplateDirectory);\n      console.log('Downloading iOS code...');\n      await Api.downloadAsync(iosExpoViewUrl, expoTemplateDirectory, {\n        extract: true,\n      });\n    }\n  }\n  return expoTemplateDirectory;\n}\n\nasync function _renameAndMoveProjectFilesAsync(\n  projectDirectory: string,\n  projectName: string,\n  exp: any\n) {\n  // remove .gitignore, as this actually pertains to internal expo template management\n  try {\n    const gitIgnorePath = path.join(projectDirectory, '.gitignore');\n    if (fs.existsSync(gitIgnorePath)) {\n      rimraf.sync(gitIgnorePath);\n    }\n  } catch (e) {}\n\n  const filesToTransform = [\n    path.join('exponent-view-template.xcodeproj', 'project.pbxproj'),\n    path.join('exponent-view-template.xcworkspace', 'contents.xcworkspacedata'),\n    path.join(\n      'exponent-view-template.xcodeproj',\n      'xcshareddata',\n      'xcschemes',\n      'exponent-view-template.xcscheme'\n    ),\n  ];\n\n  const bundleIdentifier = exp.ios && exp.ios.bundleIdentifier ? exp.ios.bundleIdentifier : '';\n\n  await Promise.all(\n    filesToTransform.map(fileName =>\n      transformFileContentsAsync(path.join(projectDirectory, fileName), fileString => {\n        return fileString\n          .replace(/com.getexponent.exponent-view-template/g, bundleIdentifier)\n          .replace(/exponent-view-template/g, projectName);\n      })\n    )\n  );\n\n  // order of this array matters\n  const filesToMove = [\n    'exponent-view-template',\n    path.join(\n      'exponent-view-template.xcodeproj',\n      'xcshareddata',\n      'xcschemes',\n      'exponent-view-template.xcscheme'\n    ),\n    'exponent-view-template.xcodeproj',\n    'exponent-view-template.xcworkspace',\n  ];\n\n  filesToMove.forEach(async fileName => {\n    let destFileName = path.join(path.dirname(fileName), `${projectName}${path.extname(fileName)}`);\n    await spawnAsync('/bin/mv', [\n      path.join(projectDirectory, fileName),\n      path.join(projectDirectory, destFileName),\n    ]);\n  });\n\n  return;\n}\n\n// TODO: logic for when kernel sdk version is different from detached sdk version\n// TODO: logic for when we're building a shell app (which may support many versions).\nasync function _configureVersionsPlistAsync(\n  configFilePath: string,\n  detachedSDKVersion: string,\n  kernelSDKVersion: string\n) {\n  await IosPlist.modifyAsync(configFilePath, 'EXSDKVersions', versionConfig => {\n    versionConfig.sdkVersions = [detachedSDKVersion];\n    versionConfig.detachedNativeVersions = {\n      shell: detachedSDKVersion,\n      kernel: kernelSDKVersion,\n    };\n    return versionConfig;\n  });\n}\n\n// TODO: logic for builds that support multiple RN versions.\nasync function _renderPodfileFromTemplateAsync(\n  context: StandaloneContext,\n  templatePodfilePath: string,\n  sdkVersion: string,\n  iosClientVersion: string\n) {\n  const { iosProjectDirectory, projectName } = getPaths(context);\n  let podfileSubstitutions = {\n    TARGET_NAME: projectName,\n    REACT_NATIVE_PATH: path.relative(\n      iosProjectDirectory,\n      path.join(context.data.projectPath, 'node_modules', 'react-native')\n    ),\n    EXPOKIT_TAG: `ios/${iosClientVersion}`,\n  };\n  if (process.env.EXPOKIT_TAG_IOS) {\n    console.log(`EXPOKIT_TAG_IOS: Using custom ExpoKit iOS tag...`);\n    podfileSubstitutions.EXPOKIT_TAG = process.env.EXPOKIT_TAG_IOS;\n  } else if (process.env.EXPO_VIEW_DIR) {\n    console.log('EXPO_VIEW_DIR: Using local ExpoKit source for iOS...');\n    podfileSubstitutions.EXPOKIT_PATH = path.relative(\n      iosProjectDirectory,\n      process.env.EXPO_VIEW_DIR\n    );\n  }\n  await renderPodfileAsync(\n    templatePodfilePath,\n    path.join(iosProjectDirectory, 'Podfile'),\n    podfileSubstitutions,\n    sdkVersion\n  );\n}\n\nasync function createDetachedAsync(context: StandaloneContext) {\n  // TODO: support both types of context\n  if (context.type !== 'user') {\n    throw new Error(`IosWorkspace only supports user standalone contexts`);\n  }\n  const sdkVersion = context.config.sdkVersion;\n  const { iosProjectDirectory, projectName, supportingDirectory } = getPaths(context);\n  const { iosClientVersion, iosExpoViewUrl } = await _getVersionedExpoKitConfigAsync(sdkVersion);\n\n  const expoTemplateDirectory = await _getOrCreateTemplateDirectoryAsync(\n    context.data.projectPath,\n    iosExpoViewUrl\n  );\n\n  // copy downloaded template xcodeproj into the user's project.\n  // HEY: if you need other paths into the extracted archive, be sure and include them\n  // when the archive is generated in `ios/pipeline.js`\n  console.log('Moving iOS project files...');\n  await Utils.ncpAsync(\n    path.join(expoTemplateDirectory, 'exponent-view-template', 'ios'),\n    iosProjectDirectory\n  );\n\n  console.log('Naming iOS project...');\n  await _renameAndMoveProjectFilesAsync(iosProjectDirectory, projectName, context.data.exp);\n\n  console.log('Configuring iOS dependencies...');\n  // this configuration must happen prior to build time because it affects which\n  // native versions of RN we depend on.\n  await _configureVersionsPlistAsync(supportingDirectory, sdkVersion, sdkVersion);\n  const templatePodfilePath = path.join(\n    expoTemplateDirectory,\n    'template-files',\n    'ios',\n    'ExpoKit-Podfile'\n  );\n  await _renderPodfileFromTemplateAsync(context, templatePodfilePath, sdkVersion, iosClientVersion);\n\n  if (!process.env.EXPO_VIEW_DIR) {\n    rimrafDontThrow(expoTemplateDirectory);\n    await IosPlist.cleanBackupAsync(supportingDirectory, 'EXSDKVersions', false);\n  }\n\n  return;\n}\n\nfunction addDetachedConfigToExp(exp: any, context: StandaloneContext): any {\n  if (context.type !== 'user') {\n    console.warn(`Tried to modify exp for a non-user StandaloneContext, ignoring`);\n    return;\n  }\n  if (!exp) {\n    exp = {};\n  }\n  const { supportingDirectory } = getPaths(context);\n  exp.ios.publishBundlePath = path.relative(\n    context.data.projectPath,\n    path.join(supportingDirectory, 'shell-app.bundle')\n  );\n  exp.ios.publishManifestPath = path.relative(\n    context.data.projectPath,\n    path.join(supportingDirectory, 'shell-app-manifest.json')\n  );\n  return exp;\n}\n\nfunction getPaths(context: StandaloneContext) {\n  let iosProjectDirectory;\n  let projectName;\n  let supportingDirectory;\n  let intermediatesDirectory;\n  if (context.config && context.config.name) {\n    let projectNameLabel = context.config.name;\n    projectName = projectNameLabel.replace(/[^a-z0-9_\\-]/gi, '-').toLowerCase();\n  } else {\n    throw new Error('Cannot configure an Expo project with no name.');\n  }\n  if (context.type === 'user') {\n    iosProjectDirectory = path.join(context.data.projectPath, 'ios');\n    supportingDirectory = path.join(iosProjectDirectory, projectName, 'Supporting');\n    intermediatesDirectory = path.join(iosProjectDirectory, 'ExpoKitIntermediates');\n  } else if (context.type === 'service') {\n    // compiled archive has a flat NSBundle\n    supportingDirectory = context.data.archivePath;\n    iosProjectDirectory = context.data.archivePath;\n    intermediatesDirectory = path.join(context.data.expoSourcePath, '..', 'shellAppIntermediates');\n  } else {\n    throw new Error(`Unsupported StandaloneContext type: ${context.type}`);\n  }\n  return {\n    intermediatesDirectory,\n    iosProjectDirectory,\n    projectName,\n    supportingDirectory,\n  };\n}\n\nexport { addDetachedConfigToExp, createDetachedAsync, getPaths };\n"],"sourceRoot":"/xdl/src"}